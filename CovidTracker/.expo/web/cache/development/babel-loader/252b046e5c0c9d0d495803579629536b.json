{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jacobdavis/codvid-app-jacobdavis608/CovidTracker/components/Local.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport Geocoder from 'react-native-geocoding';\nimport { format } from 'date-fns';\nimport { Callout } from 'react-native-maps';\nimport { Marker } from 'react-native-maps';\n\nvar api_country_names = require(\"../covid_api_country_names.json\");\n\nvar provincesStyle = require(\"../mapstyles/provincesStyle.json\");\n\nGeocoder.init('AIzaSyCO88yA5GKJDzavK8QeDZkyu3qqTfkd_18');\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: \"center\"\n  },\n  text: {\n    textAlign: 'center',\n    fontSize: 10,\n    justifyContent: 'center',\n    color: \"#01f5ff\"\n  },\n  calloutView: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    backgroundColor: \"rgba(3, 44, 71, 0.9)\",\n    borderRadius: 5,\n    width: \"70%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n    marginTop: 40\n  },\n  calloutText: {\n    textAlign: 'center',\n    fontSize: 20,\n    justifyContent: 'center',\n    color: \"#01f5ff\",\n    fontWeight: 'bold'\n  },\n  calloutSearch: {\n    flex: 1,\n    color: \"#01f5ff\",\n    borderColor: \"transparent\",\n    borderWidth: 10,\n    fontSize: 18\n  },\n  marker: {\n    flex: 1,\n    backgroundColor: 'rgba(3,44,71, 0.9)',\n    padding: 5,\n    borderRadius: 5\n  },\n  selectedMarker: {\n    flex: 1,\n    backgroundColor: '#01f5ff',\n    padding: 5,\n    borderRadius: 5\n  }\n});\n\nvar LocalMap = function (_Component) {\n  _inherits(LocalMap, _Component);\n\n  var _super = _createSuper(LocalMap);\n\n  function LocalMap(props) {\n    var _this;\n\n    _classCallCheck(this, LocalMap);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      region: {\n        latitude: 37.0902,\n        longitude: -98.7129,\n        latitudeDelta: 40.0,\n        longitudeDelta: 55.0\n      },\n      markers: [],\n      loadingCovidData: true,\n      country: \"\",\n      selectedMarker: -1,\n      country_stats: {\n        confirmed: 0,\n        deaths: 0,\n        recovered: 0,\n        valid: 0\n      }\n    };\n    _this.setCurrentCountryStats = _this.setCurrentCountryStats.bind(_assertThisInitialized(_this));\n    _this.printState = _this.printState.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LocalMap, [{\n    key: \"getDate\",\n    value: function getDate(e) {\n      var date = new Date();\n      date.setDate(date.getDate() - 1);\n      var first_half_date = format(date, \"yyyy-MM-dd\");\n      var second_half_date = format(date, \"HH:mm:ss\");\n      var formatted_date = first_half_date + \"T00:00:00Z\";\n      return formatted_date;\n    }\n  }, {\n    key: \"printState\",\n    value: function printState() {\n      console.log(this.state.markers[0].coordinate);\n    }\n  }, {\n    key: \"updateProvinceMarkers\",\n    value: function updateProvinceMarkers(e) {\n      var _this2 = this;\n\n      if (api_country_names[e.nativeEvent.text] == undefined) {\n        console.log(\"Invalid country input\");\n        this.setState({\n          markers: [],\n          selectedMarker: 0\n        });\n      } else {\n        var country_name = api_country_names[e.nativeEvent.text];\n        var date = this.getDate();\n        var api_url = \"https://api.covid19api.com/live/country/\" + country_name + \"/status/confirmed/date/\" + date;\n        this.setState({\n          markers: [],\n          selectedMarker: 0\n        }, function () {\n          fetch(api_url).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            if (resJson == undefined) {\n              console.log(\"No data\");\n            } else {\n              var new_markers = [];\n              var i;\n\n              for (i = 0; i < resJson.length; i++) {\n                var new_marker = {\n                  key: i,\n                  coordinate: {\n                    latitude: parseFloat(resJson[i][\"Lat\"]),\n                    longitude: parseFloat(resJson[i][\"Lon\"])\n                  },\n                  state_name: resJson[i][\"Province\"],\n                  confirmed: resJson[i][\"Confirmed\"],\n                  deaths: resJson[i][\"Deaths\"],\n                  recovered: resJson[i][\"Recovered\"]\n                };\n                new_markers.push(new_marker);\n              }\n\n              console.log(new_markers.length);\n\n              _this2.setState({\n                markers: new_markers,\n                selectedMarker: -1\n              }, function () {\n                return _this2.printState();\n              }).catch(function (e) {\n                return console.log(e);\n              });\n            }\n          }).catch(function (error) {\n            return console.log(error);\n          });\n        });\n        return;\n      }\n    }\n  }, {\n    key: \"renderMarker\",\n    value: function renderMarker(m) {\n      if (this.state.selectedMarker == m.id) {\n        return React.createElement(View, {\n          style: styles.selectedMarker,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }\n        }, \"Confirmed: \", this.state.markers[m.id].confirmed), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }\n        }, \"Deaths: \", this.state.markers[m.id].deaths), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }\n        }, \"Recovered: \", this.state.markers[m.id].recovered));\n      } else {\n        return React.createElement(View, {\n          style: styles.marker,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 8,\n            color: '#01f5ff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }\n        }, m.id));\n      }\n    }\n  }, {\n    key: \"selectMarker\",\n    value: function selectMarker(m) {\n      this.setState({\n        selectedMarker: m.key\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var lat = parseFloat(position.coords.latitude);\n        var lon = parseFloat(position.coords.longitude);\n        var coordinate = {\n          latitude: lat,\n          longitude: lon\n        };\n\n        _this3.setState({\n          region: {\n            latitude: lat,\n            longitude: lon,\n            latitudeDelta: 5,\n            longitudeDelta: 5\n          }\n        });\n\n        Geocoder.from(coordinate).then(function (json) {\n          var address = json.results[0].address_components;\n          var c = \"\";\n          var i;\n\n          for (i = 0; i < address.length; i++) {\n            var j;\n\n            for (j = 0; j < address[i].types.length; j++) {\n              if (address[i].types[j] == \"country\") {\n                c = address[i].long_name;\n                break;\n              }\n            }\n          }\n\n          _this3.setState({\n            country: c,\n            loadingCovidData: true\n          }, function () {\n            return _this3.setCurrentCountryStats();\n          });\n        }).catch(function (error) {\n          return console.log(error);\n        }).done();\n        return;\n      });\n    }\n  }, {\n    key: \"renderCountryStats\",\n    value: function renderCountryStats() {\n      if (this.state.country_stats.valid == 0) {\n        return React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 11\n          }\n        }, \"Country data unavailable\");\n      } else {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }\n        }, \"Confirmed: \", this.state.country_stats.confirmed), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }\n        }, \"Deaths: \", this.state.country_stats.deaths), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }\n        }, \"Recovered: \", this.state.country_stats.recovered));\n      }\n    }\n  }, {\n    key: \"setCurrentCountryStats\",\n    value: function setCurrentCountryStats() {\n      var _this4 = this;\n\n      var api_url = \"https://api.covid19api.com/total/country/\" + api_country_names[this.state.country];\n      fetch(api_url).then(function (res) {\n        return res.json();\n      }).then(function (resJson) {\n        console.log(resJson);\n\n        if (resJson.length < 1 || resJson[resJson.length - 1] == undefined) {\n          _this4.setState({\n            country_stats: {\n              confirmed: 0,\n              deaths: 0,\n              recovered: 0,\n              valid: 0\n            }\n          });\n        } else {\n          _this4.setState({\n            loadingCovidData: false,\n            curr_stats: {\n              confirmed: resJson[resJson.length - 1][\"Confirmed\"],\n              deaths: resJson[resJson.length - 1][\"Deaths\"],\n              recovered: resJson[resJson.length - 1][\"Recovered\"],\n              valid: 1\n            }\n          }).then();\n        }\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 9\n        }\n      }, React.createElement(MapView, {\n        style: {\n          flex: 1\n        },\n        provider: PROVIDER_GOOGLE,\n        showsUserLocation: true,\n        initialRegion: this.state.region,\n        region: this.state.region,\n        customMapStyle: provincesStyle,\n        zoomControlEnabled: true,\n        zoomEnabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }\n      }), React.createElement(Callout, {\n        style: styles.calloutView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.calloutText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }\n      }, \"Your country data:\"), React.createElement(Text, {\n        style: styles.calloutText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 15\n        }\n      }, this.state.country), this.renderCountryStats())));\n    }\n  }]);\n\n  return LocalMap;\n}(Component);\n\nexport { LocalMap as default };","map":{"version":3,"sources":["/Users/jacobdavis/codvid-app-jacobdavis608/CovidTracker/components/Local.js"],"names":["React","Component","MapView","PROVIDER_GOOGLE","Geocoder","format","Callout","Marker","api_country_names","require","provincesStyle","init","styles","StyleSheet","create","container","flex","flexDirection","justifyContent","text","textAlign","fontSize","color","calloutView","backgroundColor","borderRadius","width","marginLeft","marginRight","marginTop","calloutText","fontWeight","calloutSearch","borderColor","borderWidth","marker","padding","selectedMarker","LocalMap","props","state","region","latitude","longitude","latitudeDelta","longitudeDelta","markers","loadingCovidData","country","country_stats","confirmed","deaths","recovered","valid","setCurrentCountryStats","bind","printState","e","date","Date","setDate","getDate","first_half_date","second_half_date","formatted_date","console","log","coordinate","nativeEvent","undefined","setState","country_name","api_url","fetch","then","res","json","resJson","new_markers","i","length","new_marker","key","parseFloat","state_name","push","catch","error","m","id","navigator","geolocation","getCurrentPosition","position","lat","coords","lon","from","address","results","address_components","c","j","types","long_name","done","curr_stats","renderCountryStats"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { StyleSheet, Text, View, TextInput} from 'react-native';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport Geocoder from 'react-native-geocoding';\nimport {format} from 'date-fns';\nimport {Callout} from 'react-native-maps'\nimport {Marker} from 'react-native-maps'\n\nconst api_country_names = require('../covid_api_country_names.json');\n\nconst provincesStyle = require('../mapstyles/provincesStyle.json');\n\nGeocoder.init('AIzaSyCO88yA5GKJDzavK8QeDZkyu3qqTfkd_18');\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: \"center\"\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: 10,\n        justifyContent: 'center',\n        color: \"#01f5ff\"\n    },\n    calloutView: {\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      backgroundColor: \"rgba(3, 44, 71, 0.9)\",\n      borderRadius: 5,\n      width: \"70%\",\n      marginLeft: \"10%\",\n      marginRight: \"10%\",\n      marginTop: 40\n    },\n    calloutText: {\n      textAlign: 'center',\n      fontSize: 20,\n      justifyContent: 'center',\n      color: \"#01f5ff\",\n      fontWeight: 'bold'\n    },\n    calloutSearch: {\n      flex: 1,\n      color: \"#01f5ff\",\n      borderColor: \"transparent\",\n      borderWidth: 10,\n      fontSize: 18,\n    },\n    marker: {\n      flex: 1,\n      backgroundColor: 'rgba(3,44,71, 0.9)',\n      padding: 5,\n      borderRadius: 5\n    },\n    selectedMarker: {\n      flex: 1,\n      backgroundColor: '#01f5ff',\n      padding: 5,\n      borderRadius: 5\n    }\n  });\n\nexport default class LocalMap extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        region: {\n          latitude: 37.0902,\n          longitude: -98.7129,\n          latitudeDelta: 40.0,\n          longitudeDelta: 55.0\n        },\n        markers: [\n\n        ],\n        loadingCovidData: true,\n        country: \"\",\n        selectedMarker: -1, \n        country_stats: {\n          confirmed: 0,\n          deaths: 0,\n          recovered: 0,\n          valid: 0\n        }\n      }\n      this.setCurrentCountryStats = this.setCurrentCountryStats.bind(this);\n      this.printState = this.printState.bind(this);\n    }\n\n    getDate(e){\n      var date = new Date();\n      date.setDate(date.getDate() - 1); //api get yesterday's data\n      var first_half_date = format(date, \"yyyy-MM-dd\")\n      var second_half_date = format(date, \"HH:mm:ss\")\n      var formatted_date = `${first_half_date}T00:00:00Z` \n      return(formatted_date)\n    }\n    \n    printState(){\n      console.log(this.state.markers[0].coordinate);\n    }\n\n    updateProvinceMarkers(e){\n      \n      if(api_country_names[e.nativeEvent.text] == undefined){\n        console.log(\"Invalid country input\")\n        this.setState({ //reset the state\n          markers: [],\n          selectedMarker: 0 \n        });\n      } \n      else {\n        var country_name = api_country_names[e.nativeEvent.text];\n        var date = this.getDate();\n        var api_url = `https://api.covid19api.com/live/country/${country_name}/status/confirmed/date/${date}`\n        this.setState({ //reset the state\n          markers: [],\n          selectedMarker: 0 \n        }, () => {  //make api call\n          fetch(api_url)\n            .then((res) => res.json())\n            .then((resJson) => {\n              if (resJson == undefined){ //no data returned\n                console.log(\"No data\");\n              }\n              else {\n                var new_markers = [];\n                var i;\n                for (i = 0; i < resJson.length; i++){\n                  var new_marker = {\n                    key: i,\n                    coordinate: {\n                      latitude: parseFloat(resJson[i][\"Lat\"]),\n                      longitude: parseFloat(resJson[i][\"Lon\"]),\n                    },\n                    state_name: resJson[i][\"Province\"], //don't set case data until user clicks on it\n                    confirmed: resJson[i][\"Confirmed\"],\n                    deaths: resJson[i][\"Deaths\"],\n                    recovered: resJson[i][\"Recovered\"]\n                  }\n                  new_markers.push(new_marker);\n                }\n                console.log(new_markers.length)\n                this.setState({\n                  markers: new_markers,\n                  selectedMarker: -1,\n                }, () => this.printState()).catch((e) => console.log(e));\n              } \n            }).catch((error)=>console.log(error) );\n          }\n        );\n        \n      return;\n      }\n    }\n\n    renderMarker(m){\n      if (this.state.selectedMarker == m.id){\n        return (\n          <View style={styles.selectedMarker}>\n            <Text>\n              Confirmed: {this.state.markers[m.id].confirmed}\n            </Text>\n            <Text>\n              Deaths: {this.state.markers[m.id].deaths}\n            </Text>\n            <Text>\n              Recovered: {this.state.markers[m.id].recovered}\n            </Text>\n          </View>\n        )\n      }\n      else{\n        return (\n          <View style={styles.marker}>\n            <Text style={{fontSize: 8, color: '#01f5ff'}}>\n              {m.id}\n            </Text>\n          </View>\n        )\n      } \n    }\n\n    selectMarker(m){\n      this.setState({selectedMarker: m.key})\n    }\n\n\n\n\n    componentDidMount(){\n      navigator.geolocation.getCurrentPosition((position) => {\n        var lat = parseFloat(position.coords.latitude);\n        var lon = parseFloat(position.coords.longitude);\n\n        var coordinate = {\n          latitude: lat,\n          longitude: lon\n        };\n\n        this.setState({\n          region: {\n            latitude: lat,\n            longitude: lon,\n            latitudeDelta: 5,\n            longitudeDelta: 5\n          }\n        });\n        \n        Geocoder.from(coordinate).then(json => {\n          var address = json.results[0].address_components;\n          var c = \"\";\n          var i;\n          for (i = 0; i < address.length; i++){\n            var j;\n            for (j = 0; j < address[i].types.length; j++){\n              if(address[i].types[j] == \"country\"){\n                c = address[i].long_name\n                break;\n              }\n            }\n          }\n          this.setState({\n            country: c, \n            loadingCovidData: true\n          }, () => this.setCurrentCountryStats());\n        }).catch(error => console.log(error)\n        ).done();\n        return;\n      });\n    }\n\n\n    renderCountryStats(){\n      if (this.state.country_stats.valid == 0){ //if no valid country stats\n        return(\n          <Text style={styles.text}>\n            Country data unavailable\n          </Text>\n        );\n      }\n      else {\n        return(\n          <View>\n            <Text style={styles.text}>\n              Confirmed: {this.state.country_stats.confirmed}\n            </Text>\n            <Text style={styles.text}>\n              Deaths: {this.state.country_stats.deaths}\n            </Text>\n            <Text style={styles.text}>\n              Recovered: {this.state.country_stats.recovered}\n            </Text>\n          </View>\n          \n        );\n      }\n    }\n    \n    setCurrentCountryStats(){\n      var api_url = `https://api.covid19api.com/total/country/${api_country_names[this.state.country]}`;\n      fetch(api_url)\n          .then((res) => res.json())\n          .then((resJson) => {\n            console.log(resJson);\n            if (resJson.length < 1 || resJson[resJson.length-1] == undefined){ //no data returned\n              this.setState({\n                country_stats: {\n                  confirmed: 0,\n                  deaths: 0,\n                  recovered: 0,\n                  valid: 0\n                }\n              });\n            }\n            else {\n              this.setState({\n                loadingCovidData: false,\n                curr_stats: {\n                  confirmed: resJson[resJson.length-1][\"Confirmed\"],\n                  deaths: resJson[resJson.length-1][\"Deaths\"],\n                  recovered: resJson[resJson.length-1][\"Recovered\"],\n                  valid: 1\n                }\n              }).then();\n            }\n      }).catch((error)=>console.log(error) );\n    }\n\n    render(){\n      return(\n        <View style={styles.container}>\n          <MapView\n          style = {{ flex: 1 }}\n          provider= { PROVIDER_GOOGLE }\n          showsUserLocation\n          initialRegion={this.state.region}\n          region={this.state.region}\n          customMapStyle={provincesStyle}\n          zoomControlEnabled={true}\n          zoomEnabled={true}\n          /> \n          <Callout style={styles.calloutView}>\n            <View>\n              <Text style={styles.calloutText}>\n                Your country data:\n              </Text>\n              <Text style={styles.calloutText}>\n                {this.state.country}\n              </Text>\n              {this.renderCountryStats()}\n            </View>\n          </Callout>\n        </View>\n        \n      );\n\n    }\n}\n\n\n\n/*{this.state.markers.map(marker => (\n              <Marker key={marker.key} \n                coordinate={marker.coordinate}\n              >\n              <View style={styles.marker}>\n                <Text>{marker.state_name}</Text>\n              </View>\n              </Marker>\n            ))}*/"]},"metadata":{},"sourceType":"module"}