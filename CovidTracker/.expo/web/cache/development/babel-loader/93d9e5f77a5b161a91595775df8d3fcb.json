{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jacobdavis/codvid-app-jacobdavis608/CovidTracker/components/Country.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport Geocoder from 'react-native-geocoding';\nimport { format } from 'date-fns';\nimport { Callout } from 'react-native-maps';\nimport { Marker } from 'react-native-maps';\n\nvar api_country_names = require(\"../covid_api_country_names.json\");\n\nvar provincesStyle = require(\"../mapstyles/provincesStyle.json\");\n\nGeocoder.init('AIzaSyCl4V00WSzZTu_OAeLaQN3PZXCYWL6nlhQ');\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: \"center\"\n  },\n  text: {\n    fontSize: 14,\n    justifyContent: 'center',\n    color: \"#01f5ff\"\n  },\n  calloutView: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    backgroundColor: \"rgba(3, 44, 71, 0.9)\",\n    borderRadius: 5,\n    width: \"70%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n    marginTop: 40\n  },\n  calloutText: {\n    textAlign: 'center',\n    fontSize: 20,\n    justifyContent: 'center',\n    color: \"#01f5ff\",\n    fontWeight: 'bold'\n  },\n  calloutSearch: {\n    flex: 1,\n    color: \"#01f5ff\",\n    borderColor: \"transparent\",\n    borderWidth: 10,\n    fontSize: 18\n  },\n  marker: {\n    flex: 1,\n    backgroundColor: 'rgba(3,44,71, 0.9)',\n    padding: 5,\n    borderRadius: 5\n  },\n  selectedMarker: {\n    flex: 1,\n    backgroundColor: '#01f5ff',\n    padding: 5,\n    borderRadius: 5\n  }\n});\n\nvar CountryMap = function (_Component) {\n  _inherits(CountryMap, _Component);\n\n  var _super = _createSuper(CountryMap);\n\n  function CountryMap(props) {\n    var _this;\n\n    _classCallCheck(this, CountryMap);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      initialRegion: {\n        latitude: 42.3601,\n        longitude: -71.0589,\n        latitudeDelta: 50,\n        longitudeDelta: 50\n      },\n      markers: [],\n      loadingCovidData: true,\n      country: \"\",\n      province: \"\",\n      heatMap: false,\n      prov_stats: {\n        confirmed: 0,\n        deaths: 0,\n        recovered: 0\n      },\n      country_stats: {\n        confirmed: 0,\n        deaths: 0,\n        recovered: 0,\n        valid: 0\n      }\n    };\n    _this.setCurrentCountryStats = _this.setCurrentCountryStats.bind(_assertThisInitialized(_this));\n    _this.getCovidProvinceData = _this.getCovidProvinceData.bind(_assertThisInitialized(_this));\n    _this.handlePress = _this.handlePress.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CountryMap, [{\n    key: \"getYesterdaysDate\",\n    value: function getYesterdaysDate() {\n      var date = new Date();\n      date.setDate(date.getDate() - 1);\n      var first_half_date = format(date, \"yyyy-MM-dd\");\n      var second_half_date = format(date, \"HH:mm:ss\");\n      var formatted_date = first_half_date + \"T00:00:00Z\";\n      return formatted_date;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var coordinate = {\n          latitude: parseFloat(position.coords.latitude),\n          longitude: parseFloat(position.coords.longitude)\n        };\n        Geocoder.from(coordinate).then(function (json) {\n          var address = json.results[0].address_components;\n          var c = \"\";\n          var i;\n          console.log(address);\n\n          for (i = 0; i < address.length; i++) {\n            var j;\n\n            for (j = 0; j < address[i].types.length; j++) {\n              if (address[i].types[j] == \"country\") {\n                c = address[i].long_name;\n                break;\n              }\n            }\n          }\n\n          _this2.setState({\n            country: c,\n            loadingCovidData: true,\n            initialRegion: {\n              latitude: coordinate.latitude,\n              longitude: coordinate.longitude,\n              latitudeDelta: 5,\n              longitudeDelta: 5\n            }\n          }, function () {\n            return _this2.setCurrentCountryStats();\n          });\n        }).catch(function (error) {\n          return console.log(error);\n        });\n      });\n    }\n  }, {\n    key: \"renderCovidProvinceData\",\n    value: function renderCovidProvinceData() {\n      if (this.state.loadingCovidData) {\n        return React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 16\n          }\n        }, \"Loading...\");\n      } else {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }\n        }, \"Confirmed: \", this.state.prov_stats.confirmed), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }\n        }, \"Deaths: \", this.state.prov_stats.deaths), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }\n        }, \"Recovered: \", this.state.prov_stats.recovered));\n      }\n    }\n  }, {\n    key: \"getCovidProvinceData\",\n    value: function getCovidProvinceData() {\n      var _this3 = this;\n\n      var country_name = this.state.country;\n      var date = this.getYesterdaysDate();\n      var api_url = \"https://api.covid19api.com/live/country/\" + this.state.country + \"/status/confirmed/date/\" + date;\n      console.log(api_url);\n      fetch(api_url).then(function (res) {\n        return res.json();\n      }).then(function (resJson) {\n        if (resJson == undefined) {\n          console.log(\"No data\");\n        } else {\n          var i;\n\n          for (i = 0; i < resJson.length; i++) {\n            if (resJson[i][\"Province\"] == _this3.state.province) {\n              var new_marker = {\n                key: i,\n                coordinate: {\n                  latitude: parseFloat(resJson[i][\"Lat\"]),\n                  longitude: parseFloat(resJson[i][\"Lon\"])\n                }\n              };\n\n              _this3.setState({\n                markers: [new_marker],\n                prov_stats: {\n                  confirmed: resJson[i][\"Confirmed\"],\n                  deaths: resJson[i][\"Deaths\"],\n                  recovered: resJson[i][\"Recovered\"]\n                },\n                loadingCovidData: false\n              });\n\n              return;\n            }\n          }\n        }\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"handlePress\",\n    value: function handlePress(e) {\n      var _this4 = this;\n\n      Geocoder.from(e.nativeEvent.coordinate).then(function (json) {\n        var res = json.results;\n        var address = json.results[0].address_components;\n        var p = \"\";\n        var i;\n\n        for (i = 0; i < address.length; i++) {\n          var j;\n\n          for (j = 0; j < address[i].types.length; j++) {\n            if (address[i].types[j] == \"administrative_area_level_1\") {\n              p = address[i].long_name;\n              break;\n            }\n          }\n        }\n\n        _this4.setState({\n          province: p,\n          loadingCovidData: true\n        }, function () {\n          return _this4.getCovidProvinceData();\n        });\n      }).catch(function (error) {\n        _this4.setState({\n          province: \"\",\n          loadingCovidData: true,\n          markers: []\n        });\n      }).done();\n      return;\n    }\n  }, {\n    key: \"renderCountryStats\",\n    value: function renderCountryStats() {\n      if (this.state.country_stats.valid == 0) {\n        return React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 11\n          }\n        }, \"Your country data unavailable\");\n      } else {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }\n        }, \"Confirmed: \", this.state.country_stats.confirmed), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }\n        }, \"Deaths: \", this.state.country_stats.deaths), React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }\n        }, \"Recovered: \", this.state.country_stats.recovered));\n      }\n    }\n  }, {\n    key: \"setCurrentCountryStats\",\n    value: function setCurrentCountryStats() {\n      var _this5 = this;\n\n      var api_url = \"https://api.covid19api.com/total/country/\" + api_country_names[this.state.country];\n      fetch(api_url).then(function (res) {\n        return res.json();\n      }).then(function (resJson) {\n        if (resJson.length < 1 || resJson[resJson.length - 1] == undefined) {\n          _this5.setState({\n            country_stats: {\n              confirmed: 0,\n              deaths: 0,\n              recovered: 0,\n              valid: 0\n            }\n          });\n        } else {\n          _this5.setState({\n            country_stats: {\n              confirmed: resJson[resJson.length - 1][\"Confirmed\"],\n              deaths: resJson[resJson.length - 1][\"Deaths\"],\n              recovered: resJson[resJson.length - 1][\"Recovered\"],\n              valid: 1\n            }\n          });\n        }\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }\n      }, React.createElement(MapView, {\n        style: {\n          flex: 1\n        },\n        provider: PROVIDER_GOOGLE,\n        showsUserLocation: true,\n        initialRegion: this.state.initialRegion,\n        onLongPress: this.handlePress,\n        customMapStyle: provincesStyle,\n        zoomControlEnabled: true,\n        zoomEnabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }\n      }, this.state.markers.map(function (marker) {\n        return React.createElement(Marker, {\n          key: marker.key,\n          coordinate: marker.coordinate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }\n        }, React.createElement(View, {\n          style: styles.marker,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: \"#01f5ff\",\n            fontWeight: \"bold\",\n            fontSize: 18\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }\n        }, _this6.state.province), _this6.renderCovidProvinceData()));\n      })), React.createElement(Callout, {\n        style: styles.calloutView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.calloutText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }\n      }, this.state.country), this.renderCountryStats())));\n    }\n  }]);\n\n  return CountryMap;\n}(Component);\n\nexport { CountryMap as default };","map":{"version":3,"sources":["/Users/jacobdavis/codvid-app-jacobdavis608/CovidTracker/components/Country.js"],"names":["React","Component","MapView","PROVIDER_GOOGLE","Geocoder","format","Callout","Marker","api_country_names","require","provincesStyle","init","styles","StyleSheet","create","container","flex","flexDirection","justifyContent","text","fontSize","color","calloutView","backgroundColor","borderRadius","width","marginLeft","marginRight","marginTop","calloutText","textAlign","fontWeight","calloutSearch","borderColor","borderWidth","marker","padding","selectedMarker","CountryMap","props","state","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","markers","loadingCovidData","country","province","heatMap","prov_stats","confirmed","deaths","recovered","country_stats","valid","setCurrentCountryStats","bind","getCovidProvinceData","handlePress","date","Date","setDate","getDate","first_half_date","second_half_date","formatted_date","navigator","geolocation","getCurrentPosition","position","coordinate","parseFloat","coords","from","then","json","address","results","address_components","c","i","console","log","length","j","types","long_name","setState","catch","error","country_name","getYesterdaysDate","api_url","fetch","res","resJson","undefined","new_marker","key","e","nativeEvent","p","done","map","renderCovidProvinceData","renderCountryStats"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { StyleSheet, Text, View, TextInput} from 'react-native';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport Geocoder from 'react-native-geocoding';\nimport {format} from 'date-fns';\nimport {Callout} from 'react-native-maps'\nimport {Marker} from 'react-native-maps'\n\nconst api_country_names = require('../covid_api_country_names.json');\n\nconst provincesStyle = require('../mapstyles/provincesStyle.json');\n\nGeocoder.init('AIzaSyCl4V00WSzZTu_OAeLaQN3PZXCYWL6nlhQ');\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: \"center\"\n    },\n    text: {\n        fontSize: 14,\n        justifyContent: 'center',\n        color: \"#01f5ff\"\n    },\n    calloutView: {\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      backgroundColor: \"rgba(3, 44, 71, 0.9)\",\n      borderRadius: 5,\n      width: \"70%\",\n      marginLeft: \"10%\",\n      marginRight: \"10%\",\n      marginTop: 40\n    },\n    calloutText: {\n      textAlign: 'center',\n      fontSize: 20,\n      justifyContent: 'center',\n      color: \"#01f5ff\",\n      fontWeight: 'bold'\n    },\n    calloutSearch: {\n      flex: 1,\n      color: \"#01f5ff\",\n      borderColor: \"transparent\",\n      borderWidth: 10,\n      fontSize: 18,\n    },\n    marker: {\n      flex: 1,\n      backgroundColor: 'rgba(3,44,71, 0.9)',\n      padding: 5,\n      borderRadius: 5\n    },\n    selectedMarker: {\n      flex: 1,\n      backgroundColor: '#01f5ff',\n      padding: 5,\n      borderRadius: 5\n    }\n  });\n\nexport default class CountryMap extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        initialRegion: {\n          latitude: 42.3601,\n          longitude: -71.0589,\n          latitudeDelta: 50,\n          longitudeDelta: 50\n        },\n        markers: [\n\n        ],\n        loadingCovidData: true,\n        country: \"\",\n        province: \"\",\n        heatMap: false,\n        prov_stats: {\n          confirmed: 0,\n          deaths: 0,\n          recovered: 0,\n        },\n        country_stats: {\n          confirmed: 0,\n          deaths: 0,\n          recovered: 0,\n          valid: 0\n        }\n      }\n\n      this.setCurrentCountryStats = this.setCurrentCountryStats.bind(this);\n      this.getCovidProvinceData = this.getCovidProvinceData.bind(this);\n      this.handlePress = this.handlePress.bind(this);\n    }\n\n    getYesterdaysDate(){\n      var date = new Date();\n      date.setDate(date.getDate() - 1); //api get yesterday's data\n      var first_half_date = format(date, \"yyyy-MM-dd\")\n      var second_half_date = format(date, \"HH:mm:ss\")\n      var formatted_date = `${first_half_date}T00:00:00Z` \n      return(formatted_date)\n    }\n\n    componentDidMount(){\n      navigator.geolocation.getCurrentPosition((position) => {\n        var coordinate = {\n          latitude: parseFloat(position.coords.latitude),\n          longitude: parseFloat(position.coords.longitude)\n        };\n        \n        Geocoder.from(coordinate).then(json => {\n          var address = json.results[0].address_components;\n          var c = \"\"; //country\n          var i;\n          console.log(address)\n          for (i = 0; i < address.length; i++){\n            var j;\n            for (j = 0; j < address[i].types.length; j++){\n              if(address[i].types[j] == \"country\"){\n                c = address[i].long_name\n                break;\n              }\n            }\n          }\n          this.setState({\n            country: c,\n            loadingCovidData: true,\n            initialRegion: {\n              latitude: coordinate.latitude,\n              longitude: coordinate.longitude,\n              latitudeDelta: 5,\n              longitudeDelta: 5\n            }\n          }, () => this.setCurrentCountryStats());\n        }).catch(error => console.log(error)\n        );\n        \n      });\n    }\n\n    renderCovidProvinceData(){\n      if (this.state.loadingCovidData){\n        return(<Text style={styles.text}>Loading...</Text>);\n      } else {\n        return(\n          <View>\n            <Text style={styles.text}>\n              Confirmed: {this.state.prov_stats.confirmed}\n            </Text>\n            <Text style={styles.text}>\n              Deaths: {this.state.prov_stats.deaths}\n            </Text>\n            <Text style={styles.text}>\n              Recovered: {this.state.prov_stats.recovered}\n            </Text>\n          </View>\n        );\n      }\n    }\n\n    getCovidProvinceData(){\n      var country_name = this.state.country;\n      var date = this.getYesterdaysDate(); //api has up until yesterday\n      var api_url = `https://api.covid19api.com/live/country/${this.state.country}/status/confirmed/date/${date}`\n      console.log(api_url)\n      fetch(api_url)\n        .then((res) => res.json())\n        .then((resJson) => {\n              if (resJson == undefined){ //no data returned\n                console.log(\"No data\");\n              }\n              else {\n                var i;\n                for (i = 0; i < resJson.length; i++){\n                  if (resJson[i][\"Province\"] == this.state.province){\n                    var new_marker = {\n                      key: i,\n                      coordinate: {\n                        latitude: parseFloat(resJson[i][\"Lat\"]),\n                        longitude: parseFloat(resJson[i][\"Lon\"]),\n                      },\n                    }\n                    this.setState({\n                      markers: [\n                        new_marker\n                      ],\n                      prov_stats: {\n                        confirmed: resJson[i][\"Confirmed\"],\n                        deaths: resJson[i][\"Deaths\"],\n                        recovered: resJson[i][\"Recovered\"]\n                      },\n                      loadingCovidData: false,\n                    });\n                    return;\n                  }\n                }\n              } \n            }).catch((error)=>console.log(error) );\n    }\n\n    handlePress(e){\n      // identify the pressed country and display curr_stats\n      Geocoder.from(e.nativeEvent.coordinate).then(json => {\n        var res = json.results;\n        var address = json.results[0].address_components;\n        var p = \"\"; //province\n        var i;\n        for (i = 0; i < address.length; i++){\n          var j;\n          for (j = 0; j < address[i].types.length; j++){\n            if(address[i].types[j] == \"administrative_area_level_1\"){\n              p = address[i].long_name\n              break;\n            }\n          }\n        }\n\n        this.setState({\n          province: p, \n          loadingCovidData: true\n        }, () => this.getCovidProvinceData());\n        \n      }).catch(error => {\n          this.setState({\n            province: \"\",\n            loadingCovidData: true,\n            markers: []\n          });\n        }\n      ).done();\n      return;\n    }\n\n    renderCountryStats(){\n      if (this.state.country_stats.valid == 0){ //if no valid country stats\n        return(\n          <Text style={styles.text}>\n            Your country data unavailable\n          </Text>\n        );\n      }\n      else {\n        return(\n          <View>\n            <Text style={styles.text}>\n              Confirmed: {this.state.country_stats.confirmed}\n            </Text>\n            <Text style={styles.text}>\n              Deaths: {this.state.country_stats.deaths}\n            </Text>\n            <Text style={styles.text}>\n              Recovered: {this.state.country_stats.recovered}\n            </Text>\n          </View>\n          \n        );\n      }\n    }\n\n    setCurrentCountryStats(){\n      var api_url = `https://api.covid19api.com/total/country/${api_country_names[this.state.country]}`;\n      fetch(api_url)\n          .then((res) => res.json())\n          .then((resJson) => {\n            //console.log(resJson);\n            if (resJson.length < 1 || resJson[resJson.length-1] == undefined){ //no data returned\n              this.setState({\n                country_stats: {\n                  confirmed: 0,\n                  deaths: 0,\n                  recovered: 0,\n                  valid: 0\n                }\n              });\n            }\n            else {\n              this.setState({\n                country_stats: {\n                  confirmed: resJson[resJson.length-1][\"Confirmed\"],\n                  deaths: resJson[resJson.length-1][\"Deaths\"],\n                  recovered: resJson[resJson.length-1][\"Recovered\"],\n                  valid: 1\n                }\n              } ); //then set the first marker on their state\n            }\n      }).catch((error)=>console.log(error) );\n    }\n\n    render(){\n      return(\n        <View style={styles.container}>\n          <MapView\n          style = {{ flex: 1 }}\n          provider= { PROVIDER_GOOGLE }\n          showsUserLocation\n          initialRegion={this.state.initialRegion}\n          onLongPress={this.handlePress}\n          customMapStyle={provincesStyle}\n          zoomControlEnabled={true}\n          zoomEnabled={true}\n          >\n          {this.state.markers.map(marker => (\n            <Marker\n              key={marker.key}\n              coordinate={marker.coordinate}\n            >\n              <View style={styles.marker}>\n                <Text style={{color:\"#01f5ff\", fontWeight: \"bold\", fontSize:18}}>\n                  {this.state.province}\n                </Text>\n                {this.renderCovidProvinceData()}\n              </View>\n            </Marker>\n\n          ))}\n          </MapView>\n          <Callout style={styles.calloutView}>\n            <View>\n              <Text style={styles.calloutText}>\n                {this.state.country}\n              </Text>\n              {this.renderCountryStats()}\n            </View>\n          </Callout>\n        </View>\n        \n      );\n\n    }\n}\n\n\n\n/*{this.state.markers.map(marker => (\n              <Marker key={marker.key} \n                coordinate={marker.coordinate}\n              >\n              <View style={styles.marker}>\n                <Text>{marker.state_name}</Text>\n              </View>\n              </Marker>\n            ))}*/"]},"metadata":{},"sourceType":"module"}